{"ast":null,"code":"var _jsxFileName = \"/home/fred/React/pokemons/src/app.tsx\";\nimport React from 'react';\nimport { useState } from 'react';\nimport POKEMONS from './models/mock-pokemon';\n\nconst App = () => {\n  // hook d'état, useState('React') => Etat initial du composant\n  // typage avec Typescript => généricité\n  //const [name, setName] = useState<String>('React')\n  const [pokemons, setPokemons] = useState(POKEMONS);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"Pok\\xE9dex\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, \"Il y a \", pokemons.length, \" dans le pokedex\"));\n};\n\nexport default App;\n/* le même composant avec un class Component\n\nexport default class App extends React.Component {\n    const name: string = \"React\";\n\n    render() {\n        return <h1>Hello, {name}</h1>\n    }\n}\n\n*/","map":{"version":3,"sources":["/home/fred/React/pokemons/src/app.tsx"],"names":["React","useState","POKEMONS","App","pokemons","setPokemons","length"],"mappings":";AAAA,OAAOA,KAAP,MAAuC,OAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,GAAsB,GAAG,MAAM;AACjC;AACA;AACH;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAAyBJ,QAAQ,CAAYC,QAAZ,CAAvC;AAEA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWE,QAAQ,CAACE,MAApB,qBAFJ,CADD;AAMA,CAZD;;AAcA,eAAeH,GAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport { useState } from 'react';\nimport Pokemon from './models/pokemon';\nimport POKEMONS from './models/mock-pokemon';\n  \nconst App: FunctionComponent = () => {\n    // hook d'état, useState('React') => Etat initial du composant\n    // typage avec Typescript => généricité\n //const [name, setName] = useState<String>('React')\n const [pokemons, setPokemons] =useState<Pokemon[]>(POKEMONS)\n    \n return (\n  <div>\n      <h1>Pokédex</h1>\n      <p>Il y a {pokemons.length} dans le pokedex</p>\n  </div>\n )\n}\n  \nexport default App;\n\n/* le même composant avec un class Component\n\nexport default class App extends React.Component {\n    const name: string = \"React\";\n\n    render() {\n        return <h1>Hello, {name}</h1>\n    }\n}\n\n*/"]},"metadata":{},"sourceType":"module"}