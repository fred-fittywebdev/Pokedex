{"version":3,"sources":["helpers/FormatDate.ts","helpers/FormatType.ts","components/PokemonCard.tsx","services/PokemonService.ts","components/PokemonSearch.tsx","pages/PokemonList.tsx","components/Loader.tsx","pages/PokemonDetail.tsx","pages/PageNotFound.tsx","components/PokemonForm.tsx","pages/PokemonEdit.tsx","models/pokemon.ts","pages/PokemonAdd.tsx","services/AuthenticationService.ts","pages/Login.tsx","PrivateRoute.tsx","app.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","src","picture","alt","name","created","types","map","key","PokemonService","fetch","then","response","json","catch","error","handleError","data","isEmpty","method","body","JSON","stringify","headers","term","Object","keys","length","console","PokemonSearch","setTerm","pokemons","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","PokemonList","useEffect","getPokemons","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","hp","cp","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","includes","fieldName","fieldValue","newField","addpokemon","addPokemon","updatePokemon","isAddForm","validateForm","newForm","startsWith","endsWith","test","isTypesValid","onSubmit","preventDefault","handleSubmit","deletePokemon","data-tip","place","effect","htmlFor","marginBottom","disabled","checked","concat","filter","currentType","selectType","PokemonEdit","Pokemon","this","PokemonAdd","getTime","AuthenticationService","username","password","isAuthenticated","Promise","resolve","setTimeout","Login","message","setMessage","login","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7adaeb84.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\n    return `${date.getDate()}-${date.getMonth()+1}-${date.getFullYear()}`\n}\n\nexport default formatDate","const formatType = (type: string): string => {\n    let color: string;\n   \n    switch (type) {\n      case 'Feu': \n        color = 'red lighten-1'; \n        break; \n      case 'Eau': \n        color = 'blue lighten-1'; \n        break; \n      case 'Plante': \n        color = 'green lighten-1'; \n        break; \n      case 'Insecte': \n        color = 'brown lighten-1'; \n        break; \n      case 'Normal': \n        color = 'grey lighten-3'; \n        break; \n      case 'Vol': \n        color = 'blue lighten-3'; \n        break; \n      case 'Poison': \n        color = 'deep-purple accent-1'; \n        break; \n      case 'Fée': \n        color = 'pink lighten-4'; \n        break; \n      case 'Psy': \n        color = 'deep-purple darken-2'; \n        break; \n      case 'Electrik': \n        color = 'lime accent-1'; \n        break; \n      case 'Combat': \n        color = 'deep-orange'; \n        break; \n      default: \n        color = 'grey'; \n        break; \n    }\n   \n    return `chip ${color}`;\n  }\n\nexport default formatType","import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport './PokemonCard.css'\nimport formatDate from '../helpers/FormatDate'\nimport formatType from '../helpers/FormatType'\nimport { useHistory } from 'react-router-dom'\n  \ntype Props = {\n  pokemon: Pokemon,\n  borderColor?: string,\n};\n  \nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\n\n    const [color, setColor] = useState<string>()\n    const history = useHistory()\n\n    const showBorder = () => {\n        setColor(borderColor)\n    }\n    const hideBorder = () => {\n        setColor('#f5f5f5')\n    }\n    const goToPokemon = (id: number) => {\n      history.push(`/pokemons/${id}`)\n    }\n\n\n  return (\n    <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\n      <div className=\"card horizontal\" style={{ borderColor: color }}>\n        <div className=\"card-image\"> \n          <img src={pokemon.picture} alt={pokemon.name}/>\n        </div>\n        <div className=\"card-stacked\">\n          <div className=\"card-content\">\n            <p>{pokemon.name}</p>\n            <p><small>{formatDate(pokemon.created)}</small></p>\n            {pokemon.types.map(type => (\n                <span key={type} className={formatType(type)}>{type}</span>\n            ))}\n          </div>\n        </div>\n      </div> \n    </div>\n  );\n}\n  \nexport default PokemonCard;","import Pokemon from \"../models/pokemon\";\nimport POKEMONS from \"../models/mock-pokemon\";\n \nexport default class PokemonService {\n \n  // récuperer un pokemon\n  static getPokemons(): Promise<Pokemon[]> {\n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error))\n  }\n \n  // Editer un pokemon\n  static getPokemon(id: number): Promise<Pokemon|null> {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error))\n  }\n\n  // Mofidier un pokemon\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(pokemon),\n      headers: { 'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error))\n  }\n\n  // Ajout un pokemon\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n    delete pokemon.created\n    \n\n    return fetch('http://localhost:3001/pokemons', {\n      method: 'POST',\n      body: JSON.stringify(pokemon),\n      headers: { 'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error))\n  }\n\n  // Supprimer un pokemon\n  static deletePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error))\n  }\n\n  static searchPokemon(term: string): Promise<Pokemon[]> {\n    return fetch(`http://localhost:3001/pokemons?q=${term}`)\n    .then(response => response.json())\n    .catch(error => this.handleError(error))\n  }\n \n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n\n  // gestion des erreurs http grâce a catch\n  static handleError(error: Error): void {\n      console.error(error)\n  }\n}","import React, { FunctionComponent, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/PokemonService';\n \nconst PokemonSearch: FunctionComponent = () => {\n  \n  const [term, setTerm] = useState<string>('');\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const term = e.target.value;\n    setTerm(term);\n \n    if(term.length <= 1) {\n      setPokemons([]);\n      return;\n    }\n \n    PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\n  }\n  \n  return (\n    <div className=\"row\"> \n    <div className=\"col s12 m6 offset-m3\"> \n      <div className=\"card\"> \n      <div className=\"card-content\"> \n        <div className=\"input-field\"> \n        <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \n        </div> \n        <div className='collection'>\n        {pokemons.map((pokemon) => (\n          <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\n            {pokemon.name}\n          </Link>\n        ))}\n        </div> \n      </div> \n      </div> \n    </div> \n    </div>\n  );\n}\n  \nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\nimport PokemonCard from '../components/PokemonCard';\nimport PokemonService from '../services/PokemonService';\nimport { Link } from 'react-router-dom';\nimport PokemonSearch from '../components/PokemonSearch';\n  \nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  useEffect(() => {\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons))\n  }, []);\n  \n  return (\n    <div>\n      <h1 className=\"center\">Pokédex</h1>\n      <div className=\"container\"> \n        <div className=\"row\"> \n        <PokemonSearch />\n        {pokemons.map(pokemon => (\n          <PokemonCard key={pokemon.id} pokemon={pokemon}/>\n        ))}\n        </div>\n        <Link className=\"btn-floating btn-large waves-effect waves-light blue z-depth-3\"\n        style={{position: 'fixed', bottom: '25px', right: '25px'}}\n        to=\"/pokemons/add\"\n        >\n          <i className=\"material-icons\">add</i>\n        </Link>\n      </div>\n    </div> \n  );\n}\n  \nexport default PokemonList;","import React, { FunctionComponent } from 'react';\n  \nconst Loader: FunctionComponent = () => {\n   \n  return (\n    <div className=\"preloader-wrapper big active\"> \n      <div className=\"spinner-layer spinner-blue\"> \n        <div className=\"circle-clipper left\"> \n          <div className=\"circle\"></div> \n        </div>\n        <div className=\"gap-patch\"> \n          <div className=\"circle\"></div> \n        </div><div className=\"circle-clipper right\"> \n          <div className=\"circle\"></div> \n        </div>\n      </div> \n   </div> \n  );\n}\n   \nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatDate from '../helpers/FormatDate';\nimport formatType from '../helpers/FormatType';\nimport PokemonService from '../services/PokemonService';\nimport Loader from '../components/Loader';\n  \ntype Params = { id: string };\n  \nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    // le + devant params est une astuce TS permet de transformer la chanie de caractères que nous renvoie le routeur de react en un nombre attendu ici\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon))\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn-floating halfway-fab waves-effect waves-light\">\n                <i className=\"material-icons\">edit</i>\n                </Link>\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Dégâts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span>\n                          ))}</td> \n                      </tr> \n                      <tr> \n                        <td>Date de création</td> \n                        <td>{formatDate(pokemon.created)}</td> \n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loader/></h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  return (\n    <div className=\"center\">\n      <img src=\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/209.png\" alt=\"Page non trouvée\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner à l'accueil\n      </Link>\n    </div>\n  );\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/FormatType';\nimport PokemonService from '../services/PokemonService';\nimport ReactTooltip from 'react-tooltip'\n  \ntype Props = {\n  pokemon: Pokemon,\n  isEditForm: boolean\n};\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n}\n\ntype Form = {\n  picture: Field,\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types: Field\n}\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n\n  const history = useHistory()\n\n  const [form, setForm] = useState<Form>({\n    picture: { value: pokemon.picture },\n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true },\n  })\n\n  \n  \n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n\n  const hasType = (type:string): boolean => {\n    return form.types.value.includes(type)\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName: string = e.target.name\n    const fieldValue: string = e.target.value\n    const newField: Field = {[fieldName]: { value: fieldValue }}\n\n    setForm({... form, ...newField})\n  }\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked\n    let newField: Field\n\n    if(checked) {\n      //Si l'utilisateur coche un type, on l'ajoute a la liste des types du pokemon\n      const newTypes: string[] = form.types.value.concat([type])\n      newField = { value: newTypes }\n    }else {\n      //si l'utilisateur décoche un type on le retire de la liste des types du pk\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type)\n      newField = { value: newTypes }\n    }\n\n    setForm({...form, ...{ types: newField }})\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const isFormValid = validateForm()\n\n    if(isFormValid) {\n      pokemon.picture = form.picture.value\n      pokemon.name = form.name.value\n      pokemon.hp = form.hp.value\n      pokemon.cp = form.cp.value\n      pokemon.types = form.types.value\n\n      isEditForm ? updatePokemon() : addpokemon()\n      }\n  }\n\n  const addpokemon = () => {\n    PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'))\n  }\n\n  const updatePokemon = () => {\n    PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`))\n  }\n\n  const isAddForm = (): boolean => {\n    return !isEditForm\n  }\n\n  const validateForm = () => {\n    let newForm: Form = form\n\n    //Validate url\n    if(isAddForm()) {\n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\"\n      const end = \".png\"\n\n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n        const errorMsg: string = \"L'url n'est pas valide\"\n        const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false }\n        newForm = { ...newForm, ...{picture: newField} }\n      } else {\n        const newField: Field = { value: form.picture.value, error: '', isValid: true }\n        newForm = { ...newForm, ...{picture: newField} }\n      }\n    }\n\n    //Validate Name\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = 'Le nom du pokémon est obligatoire (1 à 25 caractères pas de caractères, spéciaux).'\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false }\n      newForm = { ...newForm, ...{ name: newField }}\n    }else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true }\n      newForm = { ...newForm, ...{ name: newField }}\n    }\n\n    //validate hp\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les point de vie doivent être compris entre 0 et 999.'\n      const newField: Field = { value: form.hp.value, error: errorMsg, isValid: false }\n      newForm = { ...newForm, ...{ hp: newField }}\n    }else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true }\n      newForm = { ...newForm, ...{ hp: newField }}\n    }\n\n    //validate cp\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts doivent être compris entre 0 et 99.'\n      const newField: Field = { value: form.cp.value, error: errorMsg, isValid: false }\n      newForm = { ...newForm, ...{ cp: newField }}\n    }else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true }\n      newForm = { ...newForm, ...{ cp: newField }}\n    }\n\n    setForm(newForm)\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid && newForm.picture\n  }\n\n  const isTypesValid = (type: string): boolean => {\n    if(form.types.value.length === 1 && hasType(type)) {\n      return false\n    }\n\n    if(form.types.value.length >= 3 && !hasType(type)) {\n      return false\n    }\n\n    return true\n  }\n\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`))\n  }\n   \n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n          {isEditForm && (\n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n              <span className=\"btn-floating halfway-fab waves-effect waves-light red\">\n                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n              </span>\n            </div>\n            )}\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon picture */}\n                {isAddForm() && ( \n                  <div  data-tip=\"Remplacer: xxx par le numéro du pokemon.\" className=\"form-group\">\n                  <ReactTooltip place=\"top\" type=\"error\" effect=\"float\"/>\n                  <label htmlFor=\"name\">Image</label>\n                  <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n                  {form.picture.error && \n                    <div className=\"card-panel red accent-1\">\n                      {form.picture.error}\n                    </div>\n                  }\n                </div>\n                )}\n                {/* Pokemon name */}\n                <div data-tip=\"Remplacer les ... par un nom au choix, soyez créatif !\" className=\"form-group\">\n                 <ReactTooltip place=\"top\" type=\"error\" effect=\"float\"/>\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {form.name.error && \n                    <div className=\"card-panel red accent-1\">\n                      {form.name.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.hp.error && \n                    <div className=\"card-panel red accent-1\">\n                      {form.hp.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.cp.error && \n                    <div className=\"card-panel red accent-1\">\n                      {form.cp.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport Loader from '../components/Loader';\nimport PokemonForm from '../components/PokemonForm'\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/PokemonService';\n \ntype Params = { id: string };\n  \nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon))\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loader/></h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","export default class Pokemon {\n    // 1. Typage des propiétés d'un pokémon.\n    id: number;\n    hp: number;\n    cp: number;\n    name: string;\n    picture: string;\n    types: Array<string>;\n    created?: Date;\n     \n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\n    constructor(\n     id: number,\n     hp: number = 100,\n     cp: number = 10,\n     name: string = '...',\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/xxx.png',\n     types: Array<string> = ['Normal'],\n     created: Date = new Date() \n    ) {\n     // 3. Initialisation des propiétés d'un pokémons.\n     this.id = id;\n     this.hp = hp;\n     this.cp = cp;\n     this.name = name;\n     this.picture = picture;\n     this.types = types;\n     this.created = created;\n    }\n   }","import React, { FunctionComponent, useState } from 'react';\nimport PokemonForm from '../components/PokemonForm'\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/PokemonService';\n\nconst PokemonAdd: FunctionComponent = () => {\n    const [id] = useState<number>(new Date().getTime())\n    const [pokemon] = useState<Pokemon>(new Pokemon(id))\n\n    return (\n        <div className=\"row\">\n            <h2 className=\"header center\">Ajouter un Pokémon</h2>\n            <PokemonForm pokemon={pokemon} isEditForm={false} ></PokemonForm>\n        </div>\n    )\n}\n\nexport default PokemonAdd","export default class AuthenticationService {\n\n    static isAuthenticated:boolean = false;\n  \n    static login(username: string, password: string): Promise<boolean> {\n      const isAuthenticated = (username === 'pichu' && password === 'pichu');\n  \n      return new Promise(resolve => {\n        setTimeout(() => {\n          this.isAuthenticated = isAuthenticated;\n          resolve(isAuthenticated);\n        }, 1000);\n      });\n    }\n  }","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthenticationService from '../services/AuthenticationService';\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n};\n\ntype Form = {\n  username: Field,\n  password: Field\n}\n\nconst Login: FunctionComponent = () => {\n\n  const history = useHistory();\n\n  const [form, setForm] = useState<Form>({\n    username: { value: '' },\n    password: { value: '' },\n  });\n\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pichu / pichu)');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    setForm({ ...form, ...newField});\n  }\n\n  const validateForm = () => {\n    let newForm: Form = form;\n\n    // Validator username\n    if(form.username.value.length < 3) {\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ username: newField } };\n    } else {\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ username: newField } };\n    }\n\n    // Validator password\n    if(form.password.value.length < 4) {\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 4 caractères de long.';\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ password: newField } };\n    } else {\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ password: newField } };\n    }\n\n    setForm(newForm);\n\n    return newForm.username.isValid && newForm.password.isValid;\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n    if(isFormValid) {\n      setMessage('👉 Tentative de connexion en cours ...');\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\n        if(!isAuthenticated) {\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\n          return;\n        }\n        \n        history.push('/pokemons');\n        \n      });\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Form message */}\n                {message && <div className=\"form-group\">\n                  <div className=\"card-panel grey lighten-5\">\n                    {message}\n                  </div>\n                </div>}\n                {/* Field username */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Identifiant</label>\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.username.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.username.error} \n                  </div>} \n                </div>\n                {/* Field password */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Mot de passe</label>\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.password.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.password.error} \n                  </div>} \n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n \nexport default Login;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthenticationService from './services/AuthenticationService';\n  \nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\n  <Route {...rest} render={(props) => {\n    const isAuthenticated = AuthenticationService.isAuthenticated;\n    if (!isAuthenticated) {    \n      return <Redirect to={{ pathname: '/login' }} />\n    }\n  \n    return <Component {...props} />\n  }} />\n);\n  \nexport default PrivateRoute;","import React, {FunctionComponent} from 'react';\nimport PokemonList from './pages/PokemonList';\nimport PokemonsDetail from './pages/PokemonDetail';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport PageNotFound from './pages/PageNotFound';\nimport PokemonEdit from './pages/PokemonEdit';\nimport PokemonAdd from './pages/PokemonAdd';\nimport Loading from './pages/Login'\nimport Login from './pages/Login';\nimport PrivateRoute from './PrivateRoute';\n  \nconst App: FunctionComponent = () => {\n    // hook d'état, useState('React') => Etat initial du composant\n    // typage avec Typescript => généricité\n //const [name, setName] = useState<String>('React')\n\n    \n return (\n  <Router>\n      <div>\n          {/* La barre de navigation */}\n          <nav>\n            <div className=\"nav-wrapper teal\">\n                <Link to='/' className='brand-logo center'>Pokédéx</Link>\n            </div>\n          </nav>\n          {/* Le système de route */}\n          <Switch>\n              <PrivateRoute exact path=\"/\" component={PokemonList} />\n              <Route exact path=\"/login\" component={Login} />\n              <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\n              <PrivateRoute exact path='/pokemons/add' component={PokemonAdd} />\n              <PrivateRoute exact path=\"/pokemons/:id\" component={PokemonsDetail} />\n              <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\n              <Route component={PageNotFound} />\n          </Switch>\n      </div>\n  </Router>\n )\n}\n  \nexport default App;\n\n/* le même composant avec un class Component\n\nexport default class App extends React.Component {\n    const name: string = \"React\";\n\n    render() {\n        return <h1>Hello, {name}</h1>\n    }\n}\n\n*/","import React from \"react\";\nimport ReactDOM  from \"react-dom\";\nimport App from \"./app\";\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}